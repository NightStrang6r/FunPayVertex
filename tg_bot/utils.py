"""
–í –¥–∞–Ω–Ω–æ–º –º–æ–¥—É–ª–µ –Ω–∞–ø–∏—Å–∞–Ω—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–º–∏ –ø–æ–ª—å–∑—É–µ—Ç—Å—è Telegram –±–æ—Ç.
"""

from __future__ import annotations
from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from vertex import Vertex
from locales.localizer import Localizer
from telebot.types import InlineKeyboardMarkup as K, InlineKeyboardButton as B
import configparser
import datetime
import os.path
import json
import time
import json
from os.path import exists
from FunPayAPI.common.utils import RegularExpressions
from bs4 import BeautifulSoup as bs
import tg_bot.CBT
from bs4 import BeautifulSoup
from FunPayAPI.account import Account
from FunPayAPI.types import OrderStatuses
from FunPayAPI.updater.events import *
localizer = Localizer()
_ = localizer.translate
import Utils.vertex_tools
from tg_bot import CBT
import re


class NotificationTypes:
    """
    –ö–ª–∞—Å—Å —Å —Ç–∏–ø–∞–º–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
    """
    bot_start = "1"
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞."""
    new_message = "2"
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏."""
    command = "3"
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–≤–µ–¥–µ–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ."""
    new_order = "4"
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ."""
    order_confirmed = "5"
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞."""
    review = "5r"
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∑—ã–≤–µ."""
    lots_restore = "6"
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –ª–æ—Ç–∞."""
    lots_deactivate = "7"
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ª–æ—Ç–∞."""
    delivery = "8"
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–¥–∞—á–µ —Ç–æ–≤–∞—Ä–∞."""
    lots_raise = "9"
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥–Ω—è—Ç–∏–∏ –ª–æ—Ç–æ–≤."""
    other = "10"
    """–ü—Ä–æ—á–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–ø–ª–∞–≥–∏–Ω—ã)."""
    announcement = "11"
    """–ù–æ–≤–æ—Å—Ç–∏ / –æ–±—ä—è–≤–ª–µ–Ω–∏—è."""
    ad = "12"
    """–†–µ–∫–ª–∞–º–∞."""
    critical = "13"
    """–ù–µ –æ—Ç–∫–ª—é—á–∞–µ–º—ã–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""


def load_authorized_users() -> list[int]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∫—ç—à–∞.

    :return: —Å–ø–∏—Å–æ–∫ –∏–∑ id –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    if not os.path.exists("storage/cache/tg_authorized_users.json"):
        return []
    with open("storage/cache/tg_authorized_users.json", "r", encoding="utf-8") as f:
        data = f.read()
    return json.loads(data)


def load_notification_settings() -> dict:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ –∫—ç—à–∞.

    :return: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
    """
    if not os.path.exists("storage/cache/notifications.json"):
        return {}
    with open("storage/cache/notifications.json", "r", encoding="utf-8") as f:
        return json.loads(f.read())


def load_answer_templates() -> list[str]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —à–∞–±–ª–æ–Ω—ã –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑ –∫—ç—à–∞.

    :return: —à–∞–±–ª–æ–Ω—ã –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑ –∫—ç—à–∞.
    """
    if not os.path.exists("storage/cache/answer_templates.json"):
        return []
    with open("storage/cache/answer_templates.json", "r", encoding="utf-8") as f:
        return json.loads(f.read())


def save_authorized_users(users: list[int]) -> None:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç ID –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

    :param users: —Å–ø–∏—Å–æ–∫ id –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    if not os.path.exists("storage/cache/"):
        os.makedirs("storage/cache/")
    with open("storage/cache/tg_authorized_users.json", "w", encoding="utf-8") as f:
        f.write(json.dumps(users))


def save_notification_settings(settings: dict) -> None:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.

    :param settings: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
    """
    if not os.path.exists("storage/cache/"):
        os.makedirs("storage/cache/")
    with open("storage/cache/notifications.json", "w", encoding="utf-8") as f:
        f.write(json.dumps(settings))


def save_answer_templates(templates: list[str]) -> None:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —à–∞–±–ª–æ–Ω—ã –æ—Ç–≤–µ—Ç–æ–≤.

    :param templates: —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤.
    """
    if not os.path.exists("storage/cache/"):
        os.makedirs("storage/cache")
    with open("storage/cache/answer_templates.json", "w", encoding="utf-8") as f:
        f.write(json.dumps(templates))


def escape(text: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ–¥ HTML —Ä–∞–∑–º–µ—Ç–∫—É.

    :param text: —Ç–µ–∫—Å—Ç.
    :return: —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.
    """
    escape_characters = {
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
    }
    for char in escape_characters:
        text = text.replace(char, escape_characters[char])
    return text


def bool_to_text(value: bool | int | str | None, on: str = "üü¢", off: str = "üî¥"):
    if value is not None and int(value):
        return on
    return off


def get_offset(element_index: int, max_elements_on_page: int) -> int:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–º–µ—â–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ–±—ã —ç–ª–µ–º–µ–Ω—Ç —Å –∏–Ω–¥–µ–∫—Å–æ–º element_index –æ–∫–∞–∑–∞–ª—Å—è –≤ –∫–æ–Ω—Ü–µ —Å–ø–∏—Å–∫–∞.

    :param element_index: –∏–Ω–¥–µ–∫—Å —ç–ª–µ–º–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –æ–∫–∞–∑–∞—Ç—å—Å—è –≤ –∫–æ–Ω—Ü–µ.
    :param max_elements_on_page: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ 1 —Å—Ç—Ä–∞–Ω–∏—Ü–µ.
    """
    elements_amount = element_index + 1
    elements_on_page = elements_amount % max_elements_on_page
    elements_on_page = elements_on_page if elements_on_page else max_elements_on_page
    if not elements_amount - elements_on_page:  # –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –≥—Ä—É–ø–ø–∞ –∫–æ–º–∞–Ω–¥:
        return 0
    else:
        return element_index - elements_on_page + 1


def add_navigation_buttons(keyboard_obj: K, curr_offset: int,
                           max_elements_on_page: int,
                           elements_on_page: int, elements_amount: int,
                           callback_text: str,
                           extra: list | None = None) -> K:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –∫ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –∫–Ω–æ–ø–∫–∏ —Å–ª–µ–¥. / –ø—Ä–µ–¥. —Å—Ç—Ä–∞–Ω–∏—Ü–∞.

    :param keyboard_obj: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    :param curr_offset: —Ç–µ–∫—É—â–µ–µ —Å–º–µ—â–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞.
    :param max_elements_on_page: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ –∫–Ω–æ–ø–æ–∫ –Ω–∞ 1 —Å—Ç—Ä–∞–Ω–∏—Ü–µ.
    :param elements_on_page: —Ç–µ–∫—É—â–µ–µ –∫–æ–ª-–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.
    :param elements_amount: –æ–±—â–µ–µ –∫–æ–ª-–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
    :param callback_text: —Ç–µ–∫—Å—Ç callback'–∞.
    :param extra: –¥–æ–ø. –¥–∞–Ω–Ω—ã–µ (–±—É–¥—É—Ç –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω—ã —á–µ—Ä–µ–∑ ":")
    """
    extra = (":" + ":".join(str(i) for i in extra)) if extra else ""
    back, forward = True, True

    if curr_offset > 0:
        back_offset = curr_offset - max_elements_on_page if curr_offset > max_elements_on_page else 0
        back_cb = f"{callback_text}:{back_offset}{extra}"
        first_cb = f"{callback_text}:0{extra}"
    else:
        back, back_cb, first_cb = False, CBT.EMPTY, CBT.EMPTY

    if curr_offset + elements_on_page < elements_amount:
        forward_offset = curr_offset + elements_on_page
        last_page_offset = get_offset(elements_amount - 1, max_elements_on_page)
        forward_cb = f"{callback_text}:{forward_offset}{extra}"
        last_cb = f"{callback_text}:{last_page_offset}{extra}"
    else:
        forward, forward_cb, last_cb = False, CBT.EMPTY, CBT.EMPTY

    if back or forward:
        keyboard_obj.row(B("‚óÄÔ∏è‚óÄÔ∏è", callback_data=first_cb), B("‚óÄÔ∏è", callback_data=back_cb),
                         B("‚ñ∂Ô∏è", callback_data=forward_cb), B("‚ñ∂Ô∏è‚ñ∂Ô∏è", callback_data=last_cb))
    return keyboard_obj



def generate_profile_text(vertex: Vertex) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ.

    :return: —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ.
    """
    account = vertex.account
    balance = vertex.balance
    return f"""–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ <b><i>{account.username}</i></b>

<b>ID:</b> <code>{account.id}</code>
<b>–ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤:</b> <code>{account.active_sales}</code>
<b>–ë–∞–ª–∞–Ω—Å:</b> 
    <b>‚ÇΩ:</b> <code>{balance.total_rub}‚ÇΩ</code>, –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞ <code>{balance.available_rub}‚ÇΩ</code>.
    <b>$:</b> <code>{balance.total_usd}$</code>, –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞ <code>{balance.available_usd}$</code>.
    <b>‚Ç¨:</b> <code>{balance.total_eur}‚Ç¨</code>, –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞ <code>{balance.available_eur}‚Ç¨</code>.

<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</i>  <code>{time.strftime('%H:%M:%S', time.localtime(account.last_update))}</code>"""

ORDER_CONFIRMED = {}

def message_hook(vertex: Vertex, event: NewMessageEvent):
    if event.message.type not in [MessageTypes.ORDER_CONFIRMED, MessageTypes.ORDER_CONFIRMED_BY_ADMIN, MessageTypes.ORDER_REOPENED, MessageTypes.REFUND]:
        return
    if event.message.type not in [MessageTypes.ORDER_REOPENED, MessageTypes.REFUND] and bs(event.message.html, "html.parser").find("a").text == vertex.account.username:
        return

    id = RegularExpressions().ORDER_ID.findall(str(event.message))[0][1:]

    if event.message.type in [MessageTypes.ORDER_REOPENED, MessageTypes.REFUND]:
        if id in ORDER_CONFIRMED:
            del ORDER_CONFIRMED[id]
    else:
        ORDER_CONFIRMED[id] = {"time": time.time(), "price": vertex.account.get_order(id).sum}
        with open("storage/cache/advProfileStat.json", "w", encoding="UTF-8") as f:
            f.write(json.dumps(ORDER_CONFIRMED, indent=4, ensure_ascii=False))

def extract_float(text):
    cleaned_text = re.sub(r'[^\d.,]', '', text)
    cleaned_text = cleaned_text.replace(',', '')
    return float(cleaned_text)

def get_sales(account: Account, start_from: str | None = None, include_paid: bool = True, include_closed: bool = True,
              include_refunded: bool = True, exclude_ids: list[str] | None = None,
              **filters) -> tuple[str | None, list[types.OrderShortcut]]:
    exclude_ids = exclude_ids or []
    link = "https://funpay.com/orders/trade?"

    for name in filters:
        link += f"{name}={filters[name]}&"
    link = link[:-1]

    if start_from:
        filters["continue"] = start_from

    response = account.method("post" if start_from else "get", link, {}, filters, raise_not_200=True)
    html_response = response.content.decode()

    parser = bs(html_response, "html.parser")
    check_user = parser.find("div", {"class": "content-account content-account-login"})

    next_order_id = parser.find("input", {"type": "hidden", "name": "continue"})
    if not next_order_id:
        next_order_id = None
    else:
        next_order_id = next_order_id.get("value")

    order_divs = parser.find_all("a", {"class": "tc-item"})
    if not order_divs:
        return None, []

    sells = []
    for div in order_divs:
        classname = div.get("class")
        if "warning" in classname:
            if not include_refunded:
                continue
            order_status = types.OrderStatuses.REFUNDED
        elif "info" in classname:
            if not include_paid:
                continue
            order_status = types.OrderStatuses.PAID
        else:
            if not include_closed:
                continue
            order_status = types.OrderStatuses.CLOSED

        order_id = div.find("div", {"class": "tc-order"}).text[1:]
        if order_id in exclude_ids:
            continue

        description = div.find("div", {"class": "order-desc"}).find("div").text
        price = float(extract_float(div.find("div", {"class": "tc-price"}).text))

        buyer_div = div.find("div", {"class": "media-user-name"}).find("span")
        buyer_username = buyer_div.text
        buyer_id = int(buyer_div.get("data-href")[:-1].split("https://funpay.com/users/")[1])

        order_obj = types.OrderShortcut(order_id, description, price, buyer_username, buyer_id, order_status,
                                        datetime.datetime.now(), "", str(div))
        sells.append(order_obj)

    return next_order_id, sells

def generate_adv_profile(vertex: Vertex) -> str:
    account = vertex.account
    balance = vertex.balance
    if balance.total_eur != 0:
        currency = "‚Ç¨"
        balance.balance.total_eur
    elif balance.total_eur != 0:
        currency = "$"
        balance.balance.total_eur
    elif balance.total_eur != 0:
        currency = "‚ÇΩ"
        balance.balance.total_eur
    else:
        balance = 0
        currency = "‚ÇΩ"
    if exists("storage/cache/advProfileStat.json"):
        with open("storage/cache/advProfileStat.json", "r", encoding="utf-8") as f:
            global ORDER_CONFIRMED
            ORDER_CONFIRMED = json.loads(f.read())
    sales = {"day": 0, "week": 0, "month": 0, "all": 0}
    salesPrice = {"day": 0.0, "week": 0.0, "month": 0.0, "all": 0.0}
    refunds = {"day": 0, "week": 0, "month": 0, "all": 0}
    refundsPrice = {"day": 0.0, "week": 0.0, "month": 0.0, "all": 0.0}
    canWithdraw = {"now": 0.0, "hour": 0.0, "day": 0.0, "2day": 0.0}

    account.get()

    for order in ORDER_CONFIRMED.copy():
        if time.time() - ORDER_CONFIRMED[order]["time"] > 172800:
            del ORDER_CONFIRMED[order]
            continue
        if time.time() - ORDER_CONFIRMED[order]["time"] > 169200:
            canWithdraw["hour"] += ORDER_CONFIRMED[order]["price"]
        elif time.time() - ORDER_CONFIRMED[order]["time"] > 86400:
            canWithdraw["day"] += ORDER_CONFIRMED[order]["price"]
        else:
            canWithdraw["2day"] += ORDER_CONFIRMED[order]["price"]

    randomLotPageLink = bs(account.method("get", "https://funpay.com/lots/693/", {}, {}).text, "html.parser").find("a", {"class": "tc-item"})["href"]
    randomLotPageParse = bs(account.method("get", randomLotPageLink, {}, {}).text, "html.parser")

    balance = randomLotPageParse.select_one(".badge-balance").text.split(" ")[0]
    currency = randomLotPageParse.select_one(".badge-balance").text.split(" ")[1]

    canWithdraw["now"] = randomLotPageParse.find("select", {"class": "form-control input-lg selectpicker"})["data-balance-rub"]
    if currency == "$":
        canWithdraw["now"] = randomLotPageParse.find("select", {"class": "form-control input-lg selectpicker"})["data-balance-usd"]
    elif currency == "‚Ç¨":
        canWithdraw["now"] = randomLotPageParse.find("select", {"class": "form-control input-lg selectpicker"})["data-balance-eur"]

    next_order_id, all_sales = get_sales(account)

    while next_order_id != None:
        time.sleep(1)
        next_order_id, new_sales = get_sales(account, start_from=next_order_id)
        all_sales += new_sales

    for sale in all_sales:
        if sale.status == OrderStatuses.REFUNDED:
            refunds["all"] += 1
            refundsPrice["all"] += sale.price
        else:
            sales["all"] += 1
            salesPrice["all"] += sale.price

        upperDate = bs(sale.html, "html.parser").find("div", {"class": "tc-date-time"}).text
        date = bs(sale.html, "html.parser").find("div", {"class": "tc-date-left"}).text

        if "—Å–µ–≥–æ–¥–Ω—è" in upperDate or "—Å—å–æ–≥–æ–¥–Ω—ñ" in upperDate or "today" in upperDate:
            if sale.status == OrderStatuses.REFUNDED:
                refunds["day"] += 1
                refunds["week"] += 1
                refunds["month"] += 1
                refundsPrice["day"] += sale.price
                refundsPrice["week"] += sale.price
                refundsPrice["month"] += sale.price
            else:
                sales["day"] += 1
                sales["week"] += 1
                sales["month"] += 1
                salesPrice["day"] += sale.price
                salesPrice["week"] += sale.price
                salesPrice["month"] += sale.price
        elif "–¥–µ–Ω—å" in date or "–¥–Ω—è" in date or "–¥–Ω–µ–π" in date or "–¥–Ω—ñ" in date or "day" in date or "—á–∞—Å" in date or "hour" in date or "–≥–æ–¥–∏–Ω" in date:
            if sale.status == OrderStatuses.REFUNDED:
                refunds["week"] += 1
                refunds["month"] += 1
                refundsPrice["week"] += sale.price
                refundsPrice["month"] += sale.price
            else:
                sales["week"] += 1
                sales["month"] += 1
                salesPrice["week"] += sale.price
                salesPrice["month"] += sale.price
        elif "–Ω–µ–¥–µ–ª" in date or "—Ç–∏–∂–¥" in date or "week" in date:
            if sale.status == OrderStatuses.REFUNDED:
                refunds["month"] += 1
                refundsPrice["month"] += sale.price
            else:
                sales["month"] += 1
                salesPrice["month"] += sale.price



    return f"""–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ <b><i>{account.username}</i></b>

<b>ID:</b> <code>{account.id}</code>
<b>–ë–∞–ª–∞–Ω—Å:</b> <code>{balance} {currency}</code>
<b>–ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤:</b> <code>{account.active_sales}</code>

<b>–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞</b>
<b>–°–µ–π—á–∞—Å:</b> <code>{canWithdraw["now"].split('.')[0]} {currency}</code>
<b>–ß–µ—Ä–µ–∑ —á–∞—Å:</b> <code>+{"{:.1f}".format(canWithdraw["hour"])} {currency}</code>
<b>–ß–µ—Ä–µ–∑ –¥–µ–Ω—å:</b> <code>+{"{:.1f}".format(canWithdraw["day"])} {currency}</code>
<b>–ß–µ—Ä–µ–∑ 2 –¥–Ω—è:</b> <code>+{"{:.1f}".format(canWithdraw["2day"])} {currency}</code>

<b>–¢–æ–≤–∞—Ä–æ–≤ –ø—Ä–æ–¥–∞–Ω–æ</b>
<b>–ó–∞ –¥–µ–Ω—å:</b> <code>{sales["day"]} ({"{:.1f}".format(salesPrice["day"])} {currency})</code>
<b>–ó–∞ –Ω–µ–¥–µ–ª—é:</b> <code>{sales["week"]} ({"{:.1f}".format(salesPrice["week"])} {currency})</code>
<b>–ó–∞ –º–µ—Å—è—Ü:</b> <code>{sales["month"]} ({"{:.1f}".format(salesPrice["month"])} {currency})</code>
<b>–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è:</b> <code>{sales["all"]} ({"{:.1f}".format(salesPrice["all"])} {currency})</code>

<b>–¢–æ–≤–∞—Ä–æ–≤ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ</b>
<b>–ó–∞ –¥–µ–Ω—å:</b> <code>{refunds["day"]} ({"{:.1f}".format(refundsPrice["day"])} {currency})</code>
<b>–ó–∞ –Ω–µ–¥–µ–ª—é:</b> <code>{refunds["week"]} ({"{:.1f}".format(refundsPrice["week"])} {currency})</code>
<b>–ó–∞ –º–µ—Å—è—Ü:</b> <code>{refunds["month"]} ({"{:.1f}".format(refundsPrice["month"])} {currency})</code>
<b>–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è:</b> <code>{refunds["all"]} ({"{:.1f}".format(refundsPrice["all"])} {currency})</code>

<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</i>  <code>{time.strftime('%H:%M:%S', time.localtime(account.last_update))}</code>"""

def get_orders(acc: Account, start_from: str) -> tuple[str | None, list[str]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ.
    :return: –°–ø–∏—Å–æ–∫ —Å –∑–∞–∫–∞–∑–∞–º–∏.
    """
    attempts = 3
    while attempts:
        try:
            result = acc.get_sells(start_from=start_from or None, state="paid")
            break
        except:
            attempts -= 1
            time.sleep(1)
    else:
        raise Exception
    orders = result[1]
    old_orders = []
    for i in orders:
        parser = BeautifulSoup(i.html, "html.parser")
        time_text = parser.find("div", {"class": "tc-date-left"}).text
        if any(map(time_text.__contains__, ["—Å–µ–∫", "–º–∏–Ω", "—á–∞—Å", "—Ç–æ–ª"])):
            continue
        old_orders.append(parser.find("div", {"class": "tc-order"}).text)
    return result[0], old_orders

def get_all_old_orders(acc: Account) -> list[str]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ —Å—Ç–∞—Ä—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ.
    :param acc: —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–∫–∫–∞—É–Ω—Ç–∞.
    :return: —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ä—ã—Ö –∑–∞–∫–∞–∑–æ–≤.
    """
    start_from = ""
    old_orders = []
    while start_from is not None:
        result = get_orders(acc, start_from)
        start_from = result[0]
        old_orders.extend(result[1])
        time.sleep(1)
    return old_orders

def generate_lot_info_text(lot_obj: configparser.SectionProxy) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ª–æ—Ç–µ.

    :param lot_obj: —Å–µ–∫—Ü–∏—è –ª–æ—Ç–∞ –≤ –∫–æ–Ω—Ñ–∏–≥–µ –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏.

    :return: —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ª–æ—Ç–µ.
    """
    if lot_obj.get("productsFileName") is None:
        file_path = "<b><u>–Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω.</u></b>"
        products_amount = "<code>‚àû</code>"
    else:
        file_path = f"<code>storage/products/{lot_obj.get('productsFileName')}</code>"
        if not os.path.exists(f"storage/products/{lot_obj.get('productsFileName')}"):
            with open(f"storage/products/{lot_obj.get('productsFileName')}", "w", encoding="utf-8"):
                pass
        products_amount = Utils.vertex_tools.count_products(f"storage/products/{lot_obj.get('productsFileName')}")
        products_amount = f"<code>{products_amount}</code>"

    message = f"""<b>{escape(lot_obj.name)}</b>\n
<b><i>–¢–µ–∫—Å—Ç –≤—ã–¥–∞—á–∏:</i></b> <code>{escape(lot_obj["response"])}</code>\n
<b><i>–ö–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: </i></b> {products_amount}\n
<b><i>–§–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏: </i></b>{file_path}\n
<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</i>  <code>{datetime.datetime.now().strftime('%H:%M:%S')}</code>"""
    return message
